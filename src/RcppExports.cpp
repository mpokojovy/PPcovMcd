// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// M3_vec
Rcpp::List M3_vec(const arma::mat& x, const arma::rowvec& xbar, const arma::mat& S);
RcppExport SEXP _PPcovMcd_M3_vec(SEXP xSEXP, SEXP xbarSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type xbar(xbarSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(M3_vec(x, xbar, S));
    return rcpp_result_gen;
END_RCPP
}
// M4_matrix
arma::mat M4_matrix(const arma::mat& x, const arma::rowvec& xbar, const arma::mat& S);
RcppExport SEXP _PPcovMcd_M4_matrix(SEXP xSEXP, SEXP xbarSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type xbar(xbarSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(M4_matrix(x, xbar, S));
    return rcpp_result_gen;
END_RCPP
}
// M4_vec
Rcpp::List M4_vec(const arma::mat& x, const arma::rowvec& xbar, const arma::mat& S);
RcppExport SEXP _PPcovMcd_M4_vec(SEXP xSEXP, SEXP xbarSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type xbar(xbarSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(M4_vec(x, xbar, S));
    return rcpp_result_gen;
END_RCPP
}
// M34_vec
Rcpp::List M34_vec(const arma::mat& x, const arma::rowvec& xbar, const arma::mat& S);
RcppExport SEXP _PPcovMcd_M34_vec(SEXP xSEXP, SEXP xbarSEXP, SEXP SSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type xbar(xbarSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    rcpp_result_gen = Rcpp::wrap(M34_vec(x, xbar, S));
    return rcpp_result_gen;
END_RCPP
}
// ML_objective
Rcpp::List ML_objective(arma::vec par, const arma::vec& x, unsigned int nargout);
RcppExport SEXP _PPcovMcd_ML_objective(SEXP parSEXP, SEXP xSEXP, SEXP nargoutSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type par(parSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type nargout(nargoutSEXP);
    rcpp_result_gen = Rcpp::wrap(ML_objective(par, x, nargout));
    return rcpp_result_gen;
END_RCPP
}
// ML_projector
arma::vec5 ML_projector(arma::vec par, double sigma_min);
RcppExport SEXP _PPcovMcd_ML_projector(SEXP parSEXP, SEXP sigma_minSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type par(parSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_min(sigma_minSEXP);
    rcpp_result_gen = Rcpp::wrap(ML_projector(par, sigma_min));
    return rcpp_result_gen;
END_RCPP
}
// arma_ast
arma::mat arma_ast(const arma::mat& A, const arma::mat& B);
RcppExport SEXP _PPcovMcd_arma_ast(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(arma_ast(A, B));
    return rcpp_result_gen;
END_RCPP
}
// mah_standard
Rcpp::List mah_standard(const arma::mat& x, const arma::colvec& loc, const arma::mat& cov, unsigned int rank);
RcppExport SEXP _PPcovMcd_mah_standard(SEXP xSEXP, SEXP locSEXP, SEXP covSEXP, SEXP rankSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type loc(locSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type cov(covSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type rank(rankSEXP);
    rcpp_result_gen = Rcpp::wrap(mah_standard(x, loc, cov, rank));
    return rcpp_result_gen;
END_RCPP
}
// proj_orth_comp
arma::mat proj_orth_comp(const arma::mat& x, const arma::colvec& dir);
RcppExport SEXP _PPcovMcd_proj_orth_comp(SEXP xSEXP, SEXP dirSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type dir(dirSEXP);
    rcpp_result_gen = Rcpp::wrap(proj_orth_comp(x, dir));
    return rcpp_result_gen;
END_RCPP
}
// mcd1D
Rcpp::List mcd1D(const arma::vec& x, unsigned int h);
RcppExport SEXP _PPcovMcd_mcd1D(SEXP xSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(mcd1D(x, h));
    return rcpp_result_gen;
END_RCPP
}
// mcd1D_grad
arma::vec mcd1D_grad(const arma::vec& x, const arma::uvec& best);
RcppExport SEXP _PPcovMcd_mcd1D_grad(SEXP xSEXP, SEXP bestSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type best(bestSEXP);
    rcpp_result_gen = Rcpp::wrap(mcd1D_grad(x, best));
    return rcpp_result_gen;
END_RCPP
}
// PP_objective
double PP_objective(const arma::vec& xp, const arma::uvec& best);
RcppExport SEXP _PPcovMcd_PP_objective(SEXP xpSEXP, SEXP bestSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type best(bestSEXP);
    rcpp_result_gen = Rcpp::wrap(PP_objective(xp, best));
    return rcpp_result_gen;
END_RCPP
}
// PP_gradient
arma::colvec PP_gradient(const arma::vec& xp, const arma::mat& x, const arma::uvec& best);
RcppExport SEXP _PPcovMcd_PP_gradient(SEXP xpSEXP, SEXP xSEXP, SEXP bestSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type xp(xpSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type best(bestSEXP);
    rcpp_result_gen = Rcpp::wrap(PP_gradient(xp, x, best));
    return rcpp_result_gen;
END_RCPP
}
// PP_project
arma::colvec PP_project(const arma::colvec& dir);
RcppExport SEXP _PPcovMcd_PP_project(SEXP dirSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type dir(dirSEXP);
    rcpp_result_gen = Rcpp::wrap(PP_project(dir));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_PPcovMcd_M3_vec", (DL_FUNC) &_PPcovMcd_M3_vec, 3},
    {"_PPcovMcd_M4_matrix", (DL_FUNC) &_PPcovMcd_M4_matrix, 3},
    {"_PPcovMcd_M4_vec", (DL_FUNC) &_PPcovMcd_M4_vec, 3},
    {"_PPcovMcd_M34_vec", (DL_FUNC) &_PPcovMcd_M34_vec, 3},
    {"_PPcovMcd_ML_objective", (DL_FUNC) &_PPcovMcd_ML_objective, 3},
    {"_PPcovMcd_ML_projector", (DL_FUNC) &_PPcovMcd_ML_projector, 2},
    {"_PPcovMcd_arma_ast", (DL_FUNC) &_PPcovMcd_arma_ast, 2},
    {"_PPcovMcd_mah_standard", (DL_FUNC) &_PPcovMcd_mah_standard, 4},
    {"_PPcovMcd_proj_orth_comp", (DL_FUNC) &_PPcovMcd_proj_orth_comp, 2},
    {"_PPcovMcd_mcd1D", (DL_FUNC) &_PPcovMcd_mcd1D, 2},
    {"_PPcovMcd_mcd1D_grad", (DL_FUNC) &_PPcovMcd_mcd1D_grad, 2},
    {"_PPcovMcd_PP_objective", (DL_FUNC) &_PPcovMcd_PP_objective, 2},
    {"_PPcovMcd_PP_gradient", (DL_FUNC) &_PPcovMcd_PP_gradient, 3},
    {"_PPcovMcd_PP_project", (DL_FUNC) &_PPcovMcd_PP_project, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_PPcovMcd(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
